#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('application:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var nconf = require('nconf');

// Loading certs
var privateKey = fs.readFileSync('./sslcert/igapp-key.pem', 'utf8');
var certificate = fs.readFileSync('./sslcert/igapp-cert.pem', 'utf8');

var sslOptions = { key: privateKey, cert: certificate };
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var serverSsl = https.createServer(sslOptions, app);

var io = require('socket.io')(server);
io.on('connection', (socket) => {
  socket.on('add-comment', (msg) => {
    console.log('Add comment event on executed on server!');
    console.log('Add comment event on server'+ JSON.stringify(msg));
    io.emit('new-comment-' + msg.id, msg);
  });
});

/**
 * Get port from configuration.
 */
// Note the delimiter being (:) not (.) since nconf prefer that way.
app.set('port', nconf.get('http:port'));

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(nconf.get('http:port'));
serverSsl.listen(nconf.get('http:portSsl'));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
